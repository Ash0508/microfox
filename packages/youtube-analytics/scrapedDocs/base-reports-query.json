{
  "url": "https://developers.google.com/youtube/analytics/reference/reports/query",
  "content": "Skip to main content\nYouTube\nSign in\nYouTube\nHome\nOverview\nAuthorization\nBulk Reports\nTargeted Queries\nResources\nYouTube Analytics API\nData Model\nOverview\nDimensions\nMetrics\nChannel Reports\nContent Owner Reports\nGuides\nSample requests\nAPI Reference\nOverview\nreports.query\nGroups\nGroupItems\nRevision History\nWe are updating the YouTube Analytics & Reporting APIs to match how YouTube counts views for Shorts. Learn more\nHome\nProducts\nYouTube\nAnalytics and Reporting APIs\nTargeted Queries\nWas this helpful?\nReports: Query \nbookmark_border\nOn this page\nCommon use cases\nRequest\nHTTP request\nParameters\nRequest body\nResponse\nExamples\nTry it!\n\nImportant: API requests to this method now require access to the https://www.googleapis.com/auth/youtube.readonly scope.\n\nThis method lets you retrieve many different Analytics reports. Each request uses query parameters to specify a channel ID or content owner, a start date, an end date, and at least one metric. You can also provide additional query parameters, such as dimensions, filters, and sorting instructions.\n\nMetrics are individual measurements of user activity, such as video views or ratings (likes and dislikes).\nDimensions are common criteria that are used to aggregate data, such as the date on which the user activity occurred or the country where the users were located. In a report, each row of data has a unique combination of dimension values.\nFilters are dimension values that specify the data that will be retrieved. For example, you could retrieve data for a specific country, a specific video, or a group of videos.\n\nNote: Content owner reports are only accessible to YouTube content partners who participate in the YouTube Partner Program.\n\nCommon use cases\nRequest\nHTTP request\nGET https://youtubeanalytics.googleapis.com/v2/reports\n\nAll YouTube Analytics API requests must be authorized. The Authorization guide explains how to use the OAuth 2.0 protocol to retrieve authorization tokens.\n\nYouTube Analytics API requests use the following authorization scopes:\n\nScopes\nhttps://www.googleapis.com/auth/yt-analytics.readonly\nView YouTube Analytics reports for your YouTube content. This scope provides access to user activity metrics, like view counts and rating counts.\nhttps://www.googleapis.com/auth/yt-analytics-monetary.readonly\nView YouTube Analytics monetary reports for your YouTube content. This scope provides access to user activity metrics and to estimated revenue and ad performance metrics.\nhttps://www.googleapis.com/auth/youtube\nManage your YouTube account. In the YouTube Analytics API, channel owners use this scope to manage YouTube Analytics groups and group items.\nhttps://www.googleapis.com/auth/youtubepartner\nView and manage YouTube assets and associated content on YouTube. In the YouTube Analytics API, content owners use this scope to manage YouTube Analytics groups and group items.\nParameters\n\nThe following tables list required and optional query parameters for API requests to retrieve query reports. The standard query parameters listed in the table are also optional and are supported by many Google APIs.\n\nParameters\nRequired Parameters\nendDate\nstring\nThe end date for fetching YouTube Analytics data. The value should be in YYYY-MM-DD format.\n\nThe API response contains data up until the last day for which all metrics in the query are available at the time of the query. So, for example, if the request specifies an end date of July 5, 2017, and values for all of the requested metrics are only available through July 3, 2017, that will be the last date for which data is included in the response. (That is true even if data for some of the requested metrics is available for July 4, 2017.)\n\nNote: In version 1 of the API, this parameter was named end-date.\nids\nstring\nIdentifies the YouTube channel or content owner for which you are retrieving YouTube Analytics data.\n\nTo request data for a YouTube channel, set the ids parameter value to either channel==MINE or channel==CHANNEL_ID, where CHANNEL_ID identifies the currently authenticated user's YouTube channel.\nTo request data for a YouTube content owner, set the ids parameter value to contentOwner==OWNER_NAME, where OWNER_NAME is the content owner ID for the user.\n\nmetrics\nstring\nA comma-separated list of YouTube Analytics metrics, such as views or likes,dislikes. See the documentation for channel reports or content owner reports for a list of the reports that you can retrieve and the metrics available in each report. (The Metrics document contains definitions for all of the metrics.)\nstartDate\nstring\nThe start date for fetching YouTube Analytics data. The value should be in YYYY-MM-DD format.\n\nNote: In version 1 of the API, this parameter was named start-date.\nOptional Parameters\ncurrency\nstring\nThe currency that the API will use to specify the following estimated revenue metrics: estimatedRevenue, estimatedAdRevenue, estimatedRedPartnerRevenue, grossRevenue, cpm, playbackBasedCpm. The values that the API returns for those metrics are estimates calculated using exchange rates that change on a daily basis. If none of those metrics are requested, the parameter is ignored.\n\nThe parameter value is a three-letter ISO 4217 currency code from the list of currencies below. The API returns an error if an unsupported currency is specified. The default value is USD.\n\n\nSee supported currencies\ndimensions\nstring\nA comma-separated list of YouTube Analytics dimensions, such as videoÂ or ageGroup,gender. See the documentation for channel reports or content owner reports for a list of the reports that you can retrieve and the dimensions used for those reports. (The Dimensions document contains definitions for all of the dimensions.)\nfilters\nstring\nA list of filters that should be applied when retrieving YouTube Analytics data. The documentation for channel reports and content owner reports identifies the dimensions that can be used to filter each report, and the Dimensions document defines those dimensions.\n\nIf a request uses multiple filters, join them together with a semicolon (;), and the returned result table will satisfy both filters. For example, a filters parameter value of video==dMH0bHeiRNg;country==IT restricts the result set to include data for the given video in Italy.\n\nSpecifying multiple values for a filter\n\nThe API supports the ability to specify multiple values for the video, playlist, and channel filters. To do so, specify a separated list of the video, playlist, or channel IDs for which the API response should be filtered. For example, a filters parameter value of video==pd1FJh59zxQ,Zhawgd0REhA;country==IT restricts the result set to include data for the given videos in Italy. The parameter value can specify up to 500 IDs.\n\nWhen specifying multiple values for the same filter, you can also add that filter to the list of dimensions that you specify for the request. This is true even if the filter is not listed as a supported dimension for a particular report. If you do add the filter to the list of dimensions, then the API also uses the filter values to group results.\n\nFor example, suppose you retrieve a channel's traffic source report, which aggregates viewing statistics based on the manner in which viewers reached the channel's video content. Also suppose that your request's filters parameter request identifies a list of 10 videos for which data should be returned.\nIf you add video to the dimensions parameter's value, the API response will provide separate traffic source statistics for each of the 10 videos.\nIf you do not add video to the dimensions parameter's value, the API response will aggregate the traffic source statistics for all of the 10 videos.\nincludeHistoricalChannelData\nboolean\nNote: This parameter only applies to content owner reports.\n\nIndicates whether the API response should include channels' watch time and view data from the time period prior to when the channels were linked to the content owner. The default parameter value is false which means that the API response only includes watch time and view data from the dates that channels were linked to the content owner.\n\nIt is important to remember that different channels might have been linked to a content owner on different dates. If the API request is retrieving data for multiple channels and the parameter value is false, then the API response contains data based on the linking date for each respective channel. If the parameter value is true, the API response contains data matching the dates specified in the API request.\n\nNote: In version 1 of the API, this parameter was named include-historical-channel-data.\nmaxResults\ninteger\nThe maximum number of rows to include in the response.\n\nNote: In version 1 of the API, this parameter was named max-results.\nsort\nstring\nA comma-separated list of dimensions or metrics that determine the sort order for YouTube Analytics data. By default the sort order is ascending. The - prefix causes descending sort order.\nstartIndex\ninteger\nThe 1-based index of the first entity to retrieve. (The default value is 1.) Use this parameter as a pagination mechanism along with the max-results parameter.\n\nNote: In version 1 of the API, this parameter was named start-index.\nStandard Parameters\naccess_token\nOAuth 2.0 token for the current user.\n\nOne possible way to provide an OAuth 2.0 token.\nalt\nThis parameter is not supported in version 2 of the API, which only supports JSON responses.\nThe data format for the API response.\nValid values: json, csv\nDefault value: json\ncallback\nCallback function.\n\nName of the JavaScript callback function that handles the response.\nUsed in JavaScript JSON-P requests.\nprettyPrint\n\nReturns response with indentations and line breaks.\n\nReturns the response in a human-readable format if true.\nDefault value: true.\nWhen this is false, it can reduce the response payload size, which might lead to better performance in some environments.\nquotaUser\nThis parameter was supported in version 1 of the API, which is now deprecated. This parameter is not supported in version 2 of the API.\nuserIp\nThis parameter was supported in version 1 of the API, which is now deprecated. This parameter is not supported in version 2 of the API.\nRequest body\n\nDo not send a request body when calling this method.\n\nResponse\n\nAs noted in the alt parameter definition, the API can return responses in JSON or CSV format. Information about the response body for each type is shown below:\n\nJSON\nCSV\n{\n  \"kind\": \"youtubeAnalytics#resultTable\",\n  \"columnHeaders\": [\n    {\n      \"name\": string,\n      \"dataType\": string,\n      \"columnType\": string\n    },\n    ... more headers ...\n  ],\n  \"rows\": [\n    [\n      {value}, {value}, ...\n    ]\n  ]\n}\nProperties\nkind\nstring\nThis value specifies the type of data included in the API response. For the query method, the kind property value will be youtubeAnalytics#resultTable. However, if the API adds support for other methods, API responses for those methods may introduce other kind property values.\ncolumnHeaders[]\nlist\nThis value specifies information about the data returned in the rows fields. Each item in the columnHeaders list identifies a field returned in the rows value, which contains a list of comma-delimited data.\n\nThe columnHeaders list begins with the dimensions specified in the API request, which are followed by the metrics specified in the API request. The order of both dimensions and metrics matches the ordering in the API request.\n\nFor example, if the API request contains the parameters dimensions=ageGroup,gender&metrics=viewerPercentage, the API response returns columns in this order: ageGroup,gender,viewerPercentage.\ncolumnHeaders[].name\nstring\nThe name of the dimension or metric.\ncolumnHeaders[].columnType\nstring\nThe type of the column (DIMENSION or METRIC).\ncolumnHeaders[].dataType\nstring\nThe type of the data in the column (STRING, INTEGER, FLOAT, etc.).\nrows[]\nlist\nThe list contains all rows of the result table. Each item in the list is an array that contains comma-delimited data corresponding to a single row of data. The order of the comma-delimited data fields will match the order of the columns listed in the columnHeaders field.\n\nIf no data is available for the given query, the rows element will be omitted from the response.\n\nThe response for a query with the day dimension will not contain rows for the most recent days.\n\n\nExamples\n\nNote: The following code samples may not represent all supported programming languages. See the client libraries documentation for a list of supported languages.\n\nJavaScript\nPython\nThis example calls the YouTube Analytics API to retrieve daily views and other metrics for the authorizing user's channel for the 2017 calendar year. The sample uses the Google APIs JavaScript client library.\n\nBefore running this sample locally for the first time, you need to set up authorization credentials for your project:\nCreate or select a project in the Google API Console.\nEnable the YouTube Analytics API for your project.\nAt the top of the Credentials page, select the OAuth consent screen tab. Select an Email address, enter a Product name if not already set, and click the Save button.\nOn the Credentials page, click the Create credentials button and select Oauth client ID.\nSelect the application type Web application.\nIn the Authorized JavaScript origins field, enter the URL from which you will be serving the code sample. For example, you could use something like http://localhost:8000 or http://yourserver.example.com. You can leave the Authorized redirect URIs field blank.\nClick the Create button to finish creating your credentials.\nBefore closing the dialog box, copy the client ID, which you will need to put into the code sample.\n\nThen, save the sample to a local file. In the sample, find the following line and replace YOUR_CLIENT_ID with the client ID you obtained when setting up your authorization credentials.\n\ngapi.auth2.init({client_id: 'YOUR_CLIENT_ID'});\n\nNow, you are ready to actually test the sample:\n\nOpen the local file from a web browser, and open the debugging console in the browser. You should see a page that displays two buttons.\nClick the authorize and load button to launch the user authorization flow. If you authorize the app to retrieve your channel data, you should see the following lines print to the console in the browser:\nSign-in successful\nGAPI client loaded for API\nIf you see an error message instead of the lines above, confirm that you are loading the script from the authorized redirect URI that you set up for your project and that you put your client ID into the code as described above.\nClick the execute button to call the API. You should see a response object print to the console in the browser. In that object, the result property maps to an object that contains the API data.\n<script src=\"https://apis.google.com/js/api.js\"></script>\n<script>\n  function authenticate() {\n    return gapi.auth2.getAuthInstance()\n        .signIn({scope: \"https://www.googleapis.com/auth/yt-analytics.readonly\"})\n        .then(function() { console.log(\"Sign-in successful\"); },\n              function(err) { console.error(\"Error signing in\", err); });\n  }\n  function loadClient() {\n    return gapi.client.load(\"https://youtubeanalytics.googleapis.com/$discovery/rest?version=v2\")\n        .then(function() { console.log(\"GAPI client loaded for API\"); },\n              function(err) { console.error(\"Error loading GAPI client for API\", err); });\n  }\n  // Make sure the client is loaded and sign-in is complete before calling this method.\n  function execute() {\n    return gapi.client.youtubeAnalytics.reports.query({\n      \"ids\": \"channel==MINE\",\n      \"startDate\": \"2017-01-01\",\n      \"endDate\": \"2017-12-31\",\n      \"metrics\": \"views,estimatedMinutesWatched,averageViewDuration,averageViewPercentage,subscribersGained\",\n      \"dimensions\": \"day\",\n      \"sort\": \"day\"\n    })\n        .then(function(response) {\n                // Handle the results here (response.result has the parsed body).\n                console.log(\"Response\", response);\n              },\n              function(err) { console.error(\"Execute error\", err); });\n  }\n  gapi.load(\"client:auth2\", function() {\n    gapi.auth2.init({client_id: 'YOUR_CLIENT_ID'});\n  });\n</script>\n<button onclick=\"authenticate().then(loadClient)\">authorize and load</button>\n<button onclick=\"execute()\">execute</button>\n\nyt_analytics_v2.html\nTry it!\n\nUse the APIs Explorer to call this API and see the API request and response.\n\nWas this helpful?\n\nExcept as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates.\n\nLast updated 2025-04-24 UTC.\n\nBlog\nGitHub\nIssue Tracker\nStack Overflow\nYouTube Researcher Program\nTools\nGoogle APIs Explorer\nYouTube Player Demo\nConfigure a Subscribe Button\nIssue Tracker\nFile a bug\nRequest a feature\nSee open issues\nProduct Info\nTerms of Service\nDeveloper Policies\nRequired Minimum Functionality\nBranding Guidelines\nAndroid\nChrome\nFirebase\nGoogle Cloud Platform\nGoogle AI\nAll products\nTerms\nPrivacy\nSign up for the Google for Developers newsletter\nSubscribe",
  "updatedAt": "2025-05-04T02:54:19.725Z"
}