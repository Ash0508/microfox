{
  "url": "https://developers.google.com/youtube/reporting/v1/reports",
  "content": "Skip to main content\nYouTube\nSign in\nYouTube\nHome\nOverview\nAuthorization\nBulk Reports\nTargeted Queries\nResources\nYouTube Reporting API\nBulk Data Reports for YouTube Analytics\nGet Bulk Data Reports\nDimensions\nMetrics\nChannel Reports\nContent Owner Reports\nSystem-Managed Reports\nOverview\nGet System-Managed Reports\nFields\nFinancial Summaries\nFinancial Reports\nVideos\nAssets\nReferences\nClaims\nPrimetime\nAPI Reference\nOverview\nJobs\nReports\nReportTypes\nRevision History\nWe are updating the YouTube Analytics & Reporting APIs to match how YouTube counts views for Shorts. Learn more\nHome\nProducts\nYouTube\nAnalytics and Reporting APIs\nBulk Reports\nWas this helpful?\nYouTube Reporting API - Get Bulk Data Reports \nbookmark_border\nOn this page\nOverview\nRetrieving YouTube Analytics reports\nStep 1: Retrieve authorization credentials\nStep 2: Identify the report to retrieve\nStep 3: Create a reporting job\nStep 4: Retrieve the job ID\nStep 5: Retrieve the report's download URL\nStep 6: Download the report\nImportant: Daily API reports and backfill reports are available for 60 days from the time that they are generated. Historical data reports are available for 30 days from the time that they are generated.\n\nThis policy applies globally to all reports and reporting jobs. For complete details, see the YouTube Reporting API's revision history.\n\nThe YouTube Reporting API supports predefined reports that contain a comprehensive set of YouTube Analytics data for a channel or content owner. These reports allow you to download the bulk data sets that you can query with the YouTube Analytics API or in the Analytics section of the Creator Studio.\n\nThe API also supports a set of automatically generated, system-managed reports that are available to content owners that have access to the corresponding reports in the Reports menu. Those reports contain ad revenue data and YouTube Premium subscription revenue data. See the system-managed reports documentation for more information.\n\nOverview\n\nReport fields in these reports are characterized as either dimensions or metrics:\n\nDimensions are common criteria that are used to aggregate data, such as the date on which an action occurred or the country where the users were located. In a report, each row of data has a unique combination of dimension values.\nMetrics are individual measurements related to user activity, ad performance, or estimated revenue. User activity metrics include things like video view counts and ratings (likes and dislikes).\n\nAs an example, the basic user activity report for channels contains the following dimensions:\n\nday: The date on which the activity occurred.\nchannel: The YouTube channel associated with the activity.\nvideo: The YouTube video associated with the activity.\nliveOrOnDemand: A value that indicates whether viewers were watching a live video stream.\nsubscribedStatus: A value that indicates whether the viewers were subscribed to the channel.\ncountry: The country where the viewers were located.\n\nThe report also contains a lot of metrics, such as views, likes, and averageViewDuration. After retrieving and importing the report, an application could make many different calculations based on common dimension values.\n\nFor example, to calculate the total number of views in Germany on a specific date, sum the views metric values for all rows where the country column value is DE and the day column value is the date in YYYY-MM-DD format.\n\nRetrieving YouTube Analytics reports\n\nThe following steps explain how to retrieve channel and content owner reports through the API. For instructions on how to retrieve those reports, see system-managed reports.\n\nStep 1: Retrieve authorization credentials\n\nAll YouTube Reporting API requests must be authorized. To retrieve authorization tokens through the OAuth 2.0 protocol, see Authorization guide.\n\nYouTube Reporting API requests use the following authorization scopes:\n\nScopes\nhttps://www.googleapis.com/auth/yt-analytics.readonly\nView YouTube Analytics reports for your YouTube content. This scope provides access to user activity metrics, like view counts and rating counts.\nhttps://www.googleapis.com/auth/yt-analytics-monetary.readonly\nView YouTube Analytics monetary reports for your YouTube content. This scope provides access to user activity metrics and to estimated revenue and ad performance metrics.\nStep 2: Identify the report to retrieve\n\nCall the API's reportTypes.list method to retrieve a list of reports that can be generated for the channel or content owner. The method returns a list of report IDs and names. Capture the id property value for the reports that you want to have generated. For example, the ID of the basic user activity report for channels is channel_basic_a1.\n\nYou can also find the report names in the documentation that defines supported channel reports and content owner reports.\n\nStep 3: Create a reporting job\n\nYouTube does not begin to generate your report until you create a reporting job for that report. (As such, reports are only generated for the channels and content owners that actually want to retrieve them.)\n\nTo create a reporting job, call the API's jobs.create method. Set the following values in the request body:\n\nSet the reportTypeId property's value to the report ID that you retrieved in step 2.\nSet the name property's value to the name that you want to associate with the report.\n\nThe API response to the jobs.create method contains a Job resource, which specifies the ID that uniquely identifies the job. You can start retrieving the report within 48 hours of the time that the job is created, and the first available report will be for the day that you scheduled the job.\n\nFor example, if you schedule a job on September 1, then the report for September 1 will be ready on September 3. The report for September 2 will be posted on September 4.\n\nStep 4: Retrieve the job ID\n\nNote: If your application stored the job ID returned in step 3, then you can skip this step.\n\nCall the jobs.list method to retrieve a list of scheduled jobs. The reportTypeId property in each returned Job resource identifies the type of report that that job generates. Your application needs the id property value from the same resource in the following step.\n\nStep 5: Retrieve the report's download URL\n\nCall the jobs.reports.list method to retrieve a list of reports created for the job. In the request, set the jobId parameter to the job ID of the report that you want to retrieve.\n\nTip: Use the createdAfter parameter to indicate that the API should only return reports created after a specified time. This parameter can be used to ensure that the API only returns reports that you have not already processed.\n\nThe API response contains a list of Report resources for that job. Each resource refers to a report that contains data for a unique 24-hour period. Note that YouTube does generate downloadable reports for days on which no data was available. Those reports contain a header row but do not contain additional data.\n\nThe resource's startTime and endTime properties identify the time period that the report's data covers.\nThe resource's downloadUrl property identifies the URL from which the report can be fetched.\nThe resource's createTime property specifies the date and time when the report was generated. Your application should store this value and use it to determine whether previously downloaded reports have changed.\n\nStep 6: Download the report\n\nSend an HTTP GET request to the downloadUrl obtained in step 5 to retrieve the report.\n\nYou can reduce the bandwidth needed to download reports by enabling gzip compression on download requests. While your application will need additional CPU time to uncompress API responses, the benefit of consuming fewer network resources usually outweighs that cost.\n\nTo receive a gzip-encoded response, set the Accept-Encoding HTTP request header to gzip as shown in the following example:\n\nAccept-Encoding: gzip\nProcessing reports\nBest practices\n\nApplications that use the YouTube Reporting API should always follow these practices:\n\nTo determine the ordering of the report's columns, use the report's header row. For example, do not assume that views will be the first metric returned in a report just because it is the first metric listed in a report description. Instead, use the report's header row to determine which column contains that data.\n\nTo avoid repeatedly processing the same report, keep a record of the reports that you have downloaded. The following list suggests a couple of ways to do that.\n\nWhen calling the reports.list method, use the createdAfter parameter to only retrieve reports created after a certain date. (Omit the createdAfter parameter the first time you retrieve reports.)\n\nEach time you retrieve and successfully process reports, store the timestamp corresponding to the date and time when the newest of those reports was created. Then, update the createdAfter parameter value on each successive call to the reports.list method to ensure that you are only retrieving new reports, including new reports with backfilled data, each time you call the API.\n\nAs a safeguard, before retrieving a report, also check to ensure that the report's ID is not already listed in your database.\n\nStore the ID for each report that you have downloaded and processed. You can also store additional information like the date and time when each report was generated or the report's startTime and endTime, which together identify the period for which the report contains data. Note that each job will likely have many reports since each report contains data for a 24-hour period.\n\nUse the report ID to identify reports that you still need to download and import. However, if two new reports have the same startTime and endTime property values, only import the report with the newer createTime value.\n\nReports contain IDs associated with YouTube resources. To retrieve additional metadata for those resources, use YouTube Data API. As noted in the YouTube API Services Developer Policies (sections III.E.4.b through III.E.4.d), API clients must either delete or refresh stored resource metadata from that API after 30 days.\n\nReport characteristics\n\nAPI reports are versioned .csv (comma-separated values) files that have the following characteristics:\n\nEach report contains data for a unique 24-hour period lasting from 12:00 AM through 11:59 PM Pacific Standard Time (UTC-8). As such, in any given report, the day dimension value is always the same.\n\nReports are updated daily.\n\nYouTube does generate downloadable reports for days on which no data was available. Those reports will contain a header row but will not contain additional data.\n\nAPI reports are available for 60 days from the time that they are generated, with the exception of historical data generated for new reporting jobs. Reports are inaccessible after they are more than 60 days old. that are already more than 60 days old.\nReports containing historical data are available for 30 days from the time that they are generated. Reports that contain historical data are inaccessible after they are more than 30 days old.\n\nReport data is not filtered. As such, a channel report contains all data for a channel's videos or playlists with the exception noted in the following paragraph related to deleted resources. Similarly, a content owner report contains all data for the content owner's channels (videos, playlists, ad performance, etc) with the following exception.\n\nAlthough report data is not filtered, reports do not contain any references to YouTube resources that were deleted at least 30 days prior to the date that the report was generated.\n\nReport data is not sorted.\n\nReports omit rows that do not have metrics. In other words, rows that do not have any metrics are excluded from the report. For example, if a video has no views in Albania on a particular day, that day's report will not contain rows for Albania.\n\nReports do not contain rows that provide summary data for metrics, such as the total number of views for all of a channel's videos. You can calculate those total values as the sum of the values in the report, but that sum might not include metrics for deleted videos, as noted above. You can also use the YouTube Analytics API to retrieve total counts. The YouTube Analytics API does return total values that include metrics for deleted resources even though those resources are not explicitly referenced in API responses.\n\nBackfill data\n\nBackfill data refers to a data set that replaces a previously delivered set. When a backfill data report is available, your application should retrieve the new report and update your stored data to match the revised data set. For example, your application could delete the previous data for the time period covered in the report and then import the new data set.\n\nIf YouTube has backfill data, it generates a new report with a new report ID. In that case, the report's startTime and endTime property values will match the start and end times of a report that was previously available and that you might have previously downloaded.\n\nBackfill reports do not contain any references to YouTube resources that were deleted at least 30 days prior to the date the report was generated.\n\nHistorical data\n\nWhen you schedule a new reporting job, YouTube generates historical reports from that day forward, and generates reports covering the 30-day period prior to the time that you created the job. Thus, in this documentation, historical data refers to a report that contains data for a time period before the reporting job was scheduled.\n\nHistorical reports are posted as soon as they are available. Typically, all of the historical data is posted for a job within a couple of days. As explained in the Report characteristics section, reports containing historical data are available for 30 days from the time that they are generated. Reports that contain non-historical data are available for 60 days.\n\nData anonymization\n\nTo ensure the anonymity of YouTube viewers, values for some dimensions are returned only if a metric in the same row meets a certain threshold.\n\nFor example, in the video traffic source report for channels, each row contains a number of dimensions, including trafficSourceType and trafficSourceDetail. Each row also contains various metrics, including views. In rows that describe traffic that originated from a YouTube search, the trafficSourceDetail dimension identifies the search term that led to the traffic.\n\nIn this example, the following rules apply:\n\nThe traffic source report identifies the query term (trafficSourceDetail) only if it led to at least a certain number of views of a particular video on a particular day. In this case, views is the metric, video is the aggregating dimension, and trafficSourceDetail is the anonymized dimension.\n\nThe report includes an additional row that aggregates metrics for all trafficSourceDetail values that do not meet the view count threshold. That row reports the total number of views associated with those query terms but does not identify the terms themselves.\n\nThe following tables illustrate these rules. The first table contains a hypothetical set of raw data that YouTube would use to generate a traffic source report, and the second table contains the report itself. In this example, the view count threshold is 10, meaning the report only identifies a search term if it led to at least 10 views of a particular video on a particular day. (Actual thresholds are subject to change.)\n\nRaw YouTube search traffic data for a video\n\nAssume that the data below describes YouTube search traffic to a particular video on a particular day.\n\nsearch term\tviews\testimated minutes watched\ngangnam style\t100\t200\npsy\t15\t25\npsy gangnam\t9\t15\noppa gangnam\t5\t8\nhorse riding dance\t2\t5\nSample traffic source report\n\nThe following table shows an excerpt from the traffic source report that YouTube would generate for the raw data in the preceding section. (The actual report would contain more dimensions and metrics.) In this example, the report identifies search terms only if they led to at least 10 views. Actual thresholds are subject to change.\n\nIn the report's third row, the trafficSourceDetail dimension value is NULL. The views and estimatedMinutesWatched metrics contain the combined views and minutes watched for the three search terms that generated fewer than 10 views.\n\ntrafficSourceDetail\tviews\testimatedMinutesWatched\ngangnam style\t100\t200\npsy\t15\t25\nNULL\t16\t28\nDimensions subject to anonymization\n\nThe following table identifies dimension values that are anonymized if associated metric values do not meet a certain threshold. In each case, the metric's value is aggregated over another dimension. For example, if the metric is views and the aggregating dimension is video, then the dimension value is anonymized unless the video was viewed a certain number of times.\n\nMetric\tAggregating dimension(s)\tAnonymized dimension\tAnonymized value\nsubscribersGained\tchannel\tcountry\tZZ\nsubscribersGained\tchannel\tprovince\tUS-ZZ\nsubscribersLost\tchannel\tcountry\tZZ\nsubscribersLost\tchannel\tprovince\tUS-ZZ\ncomments\tvideo\tcountry\tZZ\ncomments\tvideo\tprovince\tUS-ZZ\nlikes\tvideo\tcountry\tZZ\nlikes\tvideo\tprovince\tUS-ZZ\ndislikes\tvideo\tcountry\tZZ\ndislikes\tvideo\tprovince\tUS-ZZ\nviews\tvideo\tageGroup\tNULL\nviews\tvideo\tgender\tNULL\nviews\tvideo and trafficSourceDetail\ttrafficSourceDetail\tNULL\nNumber of subscribers to channel\tchannel\tsubscribedStatus\tNULL\nCode samples\n\nThe following code samples demonstrate how to use the API to create a reporting job and then retrieve a report for that job. Two code samples are provided for each language:\n\nThe first code sample shows how to retrieve a list of available report types and then create a new reporting job.\n\nThe second code sample shows how to retrieve a report for a particular job. You can begin retrieving reports within 48 hours of the time that the job is created.\n\nNote: The following code samples may not represent all supported programming languages. For the list of supported languages, see client libraries.\n\nJava\nPHP\nPython\n\nThe following samples use the Java client library:\n\nExample 1: Create a reporting job\nExample 2: Retrieve a report\n\nExample 1: Create a reporting job\n\nThe following code sample calls the reportTypes.list method to retrieve a list of available report types. It then calls the jobs.create method to create a new reporting job.\n\n/*\n * Copyright (c) 2015 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\n\npackage com.google.api.services.samples.youtube.cmdline.reporting;\n\nimport com.google.api.client.auth.oauth2.Credential;\nimport com.google.api.client.googleapis.json.GoogleJsonResponseException;\nimport com.google.api.services.samples.youtube.cmdline.Auth;\nimport com.google.api.services.youtubereporting.YouTubeReporting;\nimport com.google.api.services.youtubereporting.model.Job;\nimport com.google.api.services.youtubereporting.model.ListReportTypesResponse;\nimport com.google.api.services.youtubereporting.model.ReportType;\nimport com.google.common.collect.Lists;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.List;\n\n/**\n * This sample creates a reporting job by:\n *\n * 1. Listing the available report types using the \"reportTypes.list\" method.\n * 2. Creating a reporting job using the \"jobs.create\" method.\n *\n * @author Ibrahim Ulukaya\n */\npublic class CreateReportingJob {\n\n    /**\n     * Define a global instance of a YouTube Reporting object, which will be used to make\n     * YouTube Reporting API requests.\n     */\n    private static YouTubeReporting youtubeReporting;\n\n\n    /**\n     * Create a reporting job.\n     *\n     * @param args command line args (not used).\n     */\n    public static void main(String[] args) {\n\n        /*\n         * This OAuth 2.0 access scope allows for read access to the YouTube Analytics monetary reports for\n         * authenticated user's account. Any request that retrieves earnings or ad performance metrics must\n         * use this scope.\n         */\n        List<String> scopes = Lists.newArrayList(\"https://www.googleapis.com/auth/yt-analytics-monetary.readonly\");\n\n        try {\n            // Authorize the request.\n            Credential credential = Auth.authorize(scopes, \"createreportingjob\");\n\n            // This object is used to make YouTube Reporting API requests.\n            youtubeReporting = new YouTubeReporting.Builder(Auth.HTTP_TRANSPORT, Auth.JSON_FACTORY, credential)\n                    .setApplicationName(\"youtube-cmdline-createreportingjob-sample\").build();\n\n            // Prompt the user to specify the name of the job to be created.\n            String name = getNameFromUser();\n\n            if (listReportTypes()) {\n              createReportingJob(getReportTypeIdFromUser(), name);\n            }\n        } catch (GoogleJsonResponseException e) {\n            System.err.println(\"GoogleJsonResponseException code: \" + e.getDetails().getCode()\n                    + \" : \" + e.getDetails().getMessage());\n            e.printStackTrace();\n\n        } catch (IOException e) {\n            System.err.println(\"IOException: \" + e.getMessage());\n            e.printStackTrace();\n        } catch (Throwable t) {\n            System.err.println(\"Throwable: \" + t.getMessage());\n            t.printStackTrace();\n        }\n    }\n\n    /**\n     * Lists report types. (reportTypes.listReportTypes)\n     * @return true if at least one report type exists\n     * @throws IOException\n     */\n    private static boolean listReportTypes() throws IOException {\n        // Call the YouTube Reporting API's reportTypes.list method to retrieve report types.\n        ListReportTypesResponse reportTypesListResponse = youtubeReporting.reportTypes().list()\n            .execute();\n        List<ReportType> reportTypeList = reportTypesListResponse.getReportTypes();\n\n        if (reportTypeList == null || reportTypeList.isEmpty()) {\n          System.out.println(\"No report types found.\");\n          return false;\n        } else {\n            // Print information from the API response.\n            System.out.println(\"\\n================== Report Types ==================\\n\");\n            for (ReportType reportType : reportTypeList) {\n                System.out.println(\"  - Id: \" + reportType.getId());\n                System.out.println(\"  - Name: \" + reportType.getName());\n                System.out.println(\"\\n-------------------------------------------------------------\\n\");\n           }\n        }\n        return true;\n    }\n\n    /**\n     * Creates a reporting job. (jobs.create)\n     *\n     * @param reportTypeId Id of the job's report type.\n     * @param name name of the job.\n     * @throws IOException\n     */\n    private static void createReportingJob(String reportTypeId, String name)\n        throws IOException {\n        // Create a reporting job with a name and a report type id.\n        Job job = new Job();\n        job.setReportTypeId(reportTypeId);\n        job.setName(name);\n\n        // Call the YouTube Reporting API's jobs.create method to create a job.\n        Job createdJob = youtubeReporting.jobs().create(job).execute();\n\n        // Print information from the API response.\n        System.out.println(\"\\n================== Created reporting job ==================\\n\");\n        System.out.println(\"  - ID: \" + createdJob.getId());\n        System.out.println(\"  - Name: \" + createdJob.getName());\n        System.out.println(\"  - Report Type Id: \" + createdJob.getReportTypeId());\n        System.out.println(\"  - Create Time: \" + createdJob.getCreateTime());\n        System.out.println(\"\\n-------------------------------------------------------------\\n\");\n    }\n\n    /*\n     * Prompt the user to enter a name for the job. Then return the name.\n     */\n    private static String getNameFromUser() throws IOException {\n\n        String name = \"\";\n\n        System.out.print(\"Please enter the name for the job [javaTestJob]: \");\n        BufferedReader bReader = new BufferedReader(new InputStreamReader(System.in));\n        name = bReader.readLine();\n\n        if (name.length() < 1) {\n            // If nothing is entered, defaults to \"javaTestJob\".\n          name = \"javaTestJob\";\n        }\n\n        System.out.println(\"You chose \" + name + \" as the name for the job.\");\n        return name;\n    }\n\n    /*\n     * Prompt the user to enter a report type id for the job. Then return the id.\n     */\n    private static String getReportTypeIdFromUser() throws IOException {\n\n        String id = \"\";\n\n        System.out.print(\"Please enter the reportTypeId for the job: \");\n        BufferedReader bReader = new BufferedReader(new InputStreamReader(System.in));\n        id = bReader.readLine();\n\n        System.out.println(\"You chose \" + id + \" as the report type Id for the job.\");\n        return id;\n    }\n}\n\nCreateReportingJob.java\n\nExample 2: Retrieve a report\n\nThe code sample calls the jobs.list method to retrieve a list of reporting jobs. It then calls the reports.list method with the jobId parameter set to a specific job ID to retrieve reports created by that job. Finally, the sample prints out the download URL for each report.\n\n/*\n * Copyright (c) 2015 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\n\npackage com.google.api.services.samples.youtube.cmdline.reporting;\n\nimport com.google.api.client.auth.oauth2.Credential;\nimport com.google.api.client.googleapis.json.GoogleJsonResponseException;\nimport com.google.api.client.http.GenericUrl;\nimport com.google.api.services.samples.youtube.cmdline.Auth;\nimport com.google.api.services.youtubereporting.YouTubeReporting;\nimport com.google.api.services.youtubereporting.YouTubeReporting.Media.Download;\nimport com.google.api.services.youtubereporting.model.Job;\nimport com.google.api.services.youtubereporting.model.ListJobsResponse;\nimport com.google.api.services.youtubereporting.model.ListReportsResponse;\nimport com.google.api.services.youtubereporting.model.Report;\n\nimport com.google.common.collect.Lists;\n\nimport java.io.BufferedReader;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.List;\n\nimport javax.print.attribute.standard.Media;\n\n/**\n * This sample retrieves reports created by a specific job by:\n *\n * 1. Listing the jobs using the \"jobs.list\" method.\n * 2. Retrieving reports using the \"reports.list\" method.\n *\n * @author Ibrahim Ulukaya\n */\npublic class RetrieveReports {\n\n    /**\n     * Define a global instance of a YouTube Reporting object, which will be used to make\n     * YouTube Reporting API requests.\n     */\n    private static YouTubeReporting youtubeReporting;\n\n\n    /**\n     * Retrieve reports.\n     *\n     * @param args command line args (not used).\n     */\n    public static void main(String[] args) {\n\n        /*\n         * This OAuth 2.0 access scope allows for read access to the YouTube Analytics monetary reports for\n         * authenticated user's account. Any request that retrieves earnings or ad performance metrics must\n         * use this scope.\n         */\n        List<String> scopes = Lists.newArrayList(\"https://www.googleapis.com/auth/yt-analytics-monetary.readonly\");\n\n        try {\n            // Authorize the request.\n            Credential credential = Auth.authorize(scopes, \"retrievereports\");\n\n            // This object is used to make YouTube Reporting API requests.\n            youtubeReporting = new YouTubeReporting.Builder(Auth.HTTP_TRANSPORT, Auth.JSON_FACTORY, credential)\n                    .setApplicationName(\"youtube-cmdline-retrievereports-sample\").build();\n\n            if (listReportingJobs()) {\n              if(retrieveReports(getJobIdFromUser())) {\n                downloadReport(getReportUrlFromUser());\n              }\n            }\n        } catch (GoogleJsonResponseException e) {\n            System.err.println(\"GoogleJsonResponseException code: \" + e.getDetails().getCode()\n                    + \" : \" + e.getDetails().getMessage());\n            e.printStackTrace();\n\n        } catch (IOException e) {\n            System.err.println(\"IOException: \" + e.getMessage());\n            e.printStackTrace();\n        } catch (Throwable t) {\n            System.err.println(\"Throwable: \" + t.getMessage());\n            t.printStackTrace();\n        }\n    }\n\n    /**\n     * Lists reporting jobs. (jobs.listJobs)\n     * @return true if at least one reporting job exists\n     * @throws IOException\n     */\n    private static boolean listReportingJobs() throws IOException {\n        // Call the YouTube Reporting API's jobs.list method to retrieve reporting jobs.\n        ListJobsResponse jobsListResponse = youtubeReporting.jobs().list().execute();\n        List<Job> jobsList = jobsListResponse.getJobs();\n\n        if (jobsList == null || jobsList.isEmpty()) {\n          System.out.println(\"No jobs found.\");\n          return false;\n        } else {\n            // Print information from the API response.\n            System.out.println(\"\\n================== Reporting Jobs ==================\\n\");\n            for (Job job : jobsList) {\n                System.out.println(\"  - Id: \" + job.getId());\n                System.out.println(\"  - Name: \" + job.getName());\n                System.out.println(\"  - Report Type Id: \" + job.getReportTypeId());\n                System.out.println(\"\\n-------------------------------------------------------------\\n\");\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Lists reports created by a specific job. (reports.listJobsReports)\n     *\n     * @param jobId The ID of the job.\n     * @throws IOException\n     */\n    private static boolean retrieveReports(String jobId)\n        throws IOException {\n        // Call the YouTube Reporting API's reports.list method\n        // to retrieve reports created by a job.\n        ListReportsResponse reportsListResponse = youtubeReporting.jobs().reports().list(jobId).execute();\n        List<Report> reportslist = reportsListResponse.getReports();\n\n        if (reportslist == null || reportslist.isEmpty()) {\n            System.out.println(\"No reports found.\");\n            return false;\n        } else {\n            // Print information from the API response.\n            System.out.println(\"\\n============= Reports for the job \" + jobId + \" =============\\n\");\n            for (Report report : reportslist) {\n                System.out.println(\"  - Id: \" + report.getId());\n                System.out.println(\"  - From: \" + report.getStartTime());\n                System.out.println(\"  - To: \" + report.getEndTime());\n                System.out.println(\"  - Download Url: \" + report.getDownloadUrl());\n                System.out.println(\"\\n-------------------------------------------------------------\\n\");\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Download the report specified by the URL. (media.download)\n     *\n     * @param reportUrl The URL of the report to be downloaded.\n     * @throws IOException\n     */\n    private static boolean downloadReport(String reportUrl)\n        throws IOException {\n        // Call the YouTube Reporting API's media.download method to download a report.\n        Download request = youtubeReporting.media().download(\"\");\n        FileOutputStream fop = new FileOutputStream(new File(\"report\"));\n        request.getMediaHttpDownloader().download(new GenericUrl(reportUrl), fop);\n        return true;\n    }\n\n    /*\n     * Prompt the user to enter a job id for report retrieval. Then return the id.\n     */\n    private static String getJobIdFromUser() throws IOException {\n\n        String id = \"\";\n\n        System.out.print(\"Please enter the job id for the report retrieval: \");\n        BufferedReader bReader = new BufferedReader(new InputStreamReader(System.in));\n        id = bReader.readLine();\n\n        System.out.println(\"You chose \" + id + \" as the job Id for the report retrieval.\");\n        return id;\n    }\n\n    /*\n     * Prompt the user to enter a URL for report download. Then return the URL.\n     */\n    private static String getReportUrlFromUser() throws IOException {\n\n        String url = \"\";\n\n        System.out.print(\"Please enter the report URL to download: \");\n        BufferedReader bReader = new BufferedReader(new InputStreamReader(System.in));\n        url = bReader.readLine();\n\n        System.out.println(\"You chose \" + url + \" as the URL to download.\");\n        return url;\n    }}\n\n\nRetrieveReports.java\nWas this helpful?\n\nExcept as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates.\n\nLast updated 2025-04-24 UTC.\n\nBlog\nGitHub\nIssue Tracker\nStack Overflow\nYouTube Researcher Program\nTools\nGoogle APIs Explorer\nYouTube Player Demo\nConfigure a Subscribe Button\nIssue Tracker\nFile a bug\nRequest a feature\nSee open issues\nProduct Info\nTerms of Service\nDeveloper Policies\nRequired Minimum Functionality\nBranding Guidelines\nAndroid\nChrome\nFirebase\nGoogle Cloud Platform\nGoogle AI\nAll products\nTerms\nPrivacy\nSign up for the Google for Developers newsletter\nSubscribe",
  "updatedAt": "2025-05-04T11:06:18.978Z"
}